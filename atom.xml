<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿木隆</title>
  <subtitle>北风骤起，艳阳高照</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://106.15.95.246/"/>
  <updated>2017-07-02T05:36:56.139Z</updated>
  <id>http://106.15.95.246/</id>
  
  <author>
    <name>阿木隆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jsonp</title>
    <link href="http://106.15.95.246/2017/07/02/jsonp/"/>
    <id>http://106.15.95.246/2017/07/02/jsonp/</id>
    <published>2017-07-02T05:32:48.000Z</published>
    <updated>2017-07-02T05:36:56.139Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<p>JSONP(JSON with Padding)是JSON的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题。由于同源策略，一般来说位于 server1.example.com 的网页无法与不是 server1.example.com的服务器沟通，而 HTML 的&lt;script&gt;元素是一个例外。利用 &lt;script&gt;元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON 资料，而这种使用模式就是所谓的 JSONP。用 JSONP 抓到的资料并不是 JSON，而是任意的JavaScript，用 JavaScript 直译器执行而不是用 JSON 解析器解析。<br><a id="more"></a></p>
<h2 id="Jsonp原理"><a href="#Jsonp原理" class="headerlink" title="Jsonp原理"></a>Jsonp原理</h2><p>在客户端定义一个callbackFunction, 然后把callbackFunction的名字传给服务器。</p>
<p>服务器先生成 json 数据。然后以 javascript 语法的方式，生成一个function , function 名字就是传递上来的参数 jsonp的值.</p>
<p>最后将 json 数据直接以入参的方式，放置到 function 中，这样就生成了一段 js 语法的文档，返回给客户端。</p>
<p>客户端浏览器，解析script标签，并执行返回的 javascript 文档，此时数据作为参数，传入到了客户端预先定义好的 callbackFunction 函数里.（动态执行回调函数）</p>
<h2 id="服务器端对JSONP支持"><a href="#服务器端对JSONP支持" class="headerlink" title="服务器端对JSONP支持"></a>服务器端对JSONP支持</h2><p>请求： <a href="http://example.com/servlet?jsonp=callbackFunction。" target="_blank" rel="external">http://example.com/servlet?jsonp=callbackFunction。</a><br>期望数据：[“param1”,”param2”]<br>前段通过&lt;script&gt;加载文档并调用。实现callbackFunction函数调用</p>
<p>Java:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">return</span> request.getParameter(<span class="string">"callbackFunction"</span>)+<span class="string">"("</span>+JsonString+<span class="string">")"</span>;</div></pre></td></tr></table></figure></p>
<p>返回内容像：callbackFunction([“param1”,”param2”])</p>
<h2 id="客户端实现跨域请求"><a href="#客户端实现跨域请求" class="headerlink" title="客户端实现跨域请求"></a>客户端实现跨域请求</h2><p>在客户端调用提供JSONP支持的URL Service，获取JSONP格式数据。</p>
<h3 id="创建script标签"><a href="#创建script标签" class="headerlink" title="创建script标签"></a>创建script标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var head= document.getElementsByTagName(<span class="string">'head'</span>)[0]; </div><div class="line">var script= document.createElement(<span class="string">'script'</span>); </div><div class="line">script.type= <span class="string">'text/javascript'</span>; </div><div class="line">script.src= <span class="string">'http://example.com/servlet?jsonp=callbackFunction'</span>; </div><div class="line">head.appendChild(script);</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;head&gt;</div><div class="line">	...</div><div class="line">	&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"http://example.com/servlet?jsonp=callbackFunction"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div></pre></td></tr></table></figure></p>
<h3 id="客户端实现-callbackFunction-函数-全局"><a href="#客户端实现-callbackFunction-函数-全局" class="headerlink" title="客户端实现 callbackFunction 函数(全局)"></a>客户端实现 callbackFunction 函数(全局)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> callbackFunction(result) &#123;  </div><div class="line">    <span class="keyword">for</span>(var i <span class="keyword">in</span> result) &#123;  </div><div class="line">        alert(i+<span class="string">":"</span>+result[i]); </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="监听jsonp"><a href="#监听jsonp" class="headerlink" title="监听jsonp"></a>监听jsonp</h2><p>Jsonp本质上就是一个异步的get请求，但是他跟ajax理论上毫无关联。<br>创建的script标签加载过程中同样拥有onreadystatechange事件与onload事件，同样也拥有onerror事件。我们可以通过这些来观察jsonp回调。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">	var head= document.getElementsByTagName(<span class="string">'head'</span>)[0]; </div><div class="line">	var script= document.createElement(<span class="string">'script'</span>); </div><div class="line">	script.type= <span class="string">'text/javascript'</span>; </div><div class="line">	script.onload = script.onreadystatechange = <span class="function"><span class="title">function</span></span>() &#123; </div><div class="line">		<span class="keyword">if</span> (!this.readyState || this.readyState === <span class="string">"loaded"</span> || this.readyState === <span class="string">"complete"</span> ) &#123; </div><div class="line">			alert(<span class="string">'加载成功'</span>)</div><div class="line">			script.onload = script.onreadystatechange = null; </div><div class="line">		&#125; </div><div class="line">	&#125;; </div><div class="line">	script.onerror = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">		alert(<span class="string">'加载失败'</span>)</div><div class="line">	&#125;</div><div class="line">	script.src= <span class="string">'jsonp.js'</span>; </div><div class="line">	head.appendChild(script); </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>除此之外，考虑到安全问题，我们可以通过使用正则表达式检查 JSON 字符。</p>
<p>js代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var my_JSON_object = !(/[^,:&#123;&#125;\[\]0-9.\-+Eaeflnr-u \n\r\t]/.<span class="built_in">test</span>(text.replace(/<span class="string">"(\\.|[^"</span>\\])*<span class="string">"/g, ' '))) &amp;&amp; eval('(' + text + ')');</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      数据交互与dom操作并列前端两大基石
    
    </summary>
    
      <category term="心得" scheme="http://106.15.95.246/categories/%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="javascript" scheme="http://106.15.95.246/tags/javascript/"/>
    
      <category term="跨域" scheme="http://106.15.95.246/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>ajax浅析</title>
    <link href="http://106.15.95.246/2017/07/02/ajax%E6%B5%85%E6%9E%90/"/>
    <id>http://106.15.95.246/2017/07/02/ajax浅析/</id>
    <published>2017-07-02T05:32:29.000Z</published>
    <updated>2017-07-02T05:36:08.747Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<p>AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。<br>AJAX = 异步 JavaScript和XML（标准通用标记语言的子集）。<br>AJAX 是一种用于创建快速动态网页的技术。<br>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。<br><a id="more"></a></p>
<h2 id="XMLHttpRequest-是-AJAX-的基础"><a href="#XMLHttpRequest-是-AJAX-的基础" class="headerlink" title="XMLHttpRequest 是 AJAX 的基础"></a>XMLHttpRequest 是 AJAX 的基础</h2><p>注：IE5 和 IE6 使用 ActiveXObject。</p>
<h2 id="创建-XMLHttpRequest-对象"><a href="#创建-XMLHttpRequest-对象" class="headerlink" title="创建 XMLHttpRequest 对象"></a>创建 XMLHttpRequest 对象</h2><p>所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。<br>创建 XMLHttpRequest 对象的语法：</p>
<blockquote>
<p>variable=new XMLHttpRequest();</p>
</blockquote>
<p>Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：</p>
<blockquote>
<p>variable=new ActiveXObject(“Microsoft.XMLHTTP”);</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//创建</div><div class="line">var xmlhttp;</div><div class="line"><span class="keyword">if</span> (window.XMLHttpRequest)</div><div class="line">  &#123;// code <span class="keyword">for</span> IE7+, Firefox, Chrome, Opera, Safari</div><div class="line">  xmlhttp=new XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;// code <span class="keyword">for</span> IE6, IE5</div><div class="line">  xmlhttp=new ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="XMLHttpRequest对象用于和服务器交换数据"><a href="#XMLHttpRequest对象用于和服务器交换数据" class="headerlink" title="XMLHttpRequest对象用于和服务器交换数据"></a>XMLHttpRequest对象用于和服务器交换数据</h2><h3 id="XMLHttpRequest对象的方法"><a href="#XMLHttpRequest对象的方法" class="headerlink" title="XMLHttpRequest对象的方法"></a>XMLHttpRequest对象的方法</h3><p>open(method,url,async)</p>
<blockquote>
<p>method：请求的类型；GET 或 POST<br>url：文件在服务器上的位置<br>async：true（异步）或 false（同步）</p>
</blockquote>
<p>POST请求 send(string)<br>GET请求 send()</p>
<p>setRequestHeader(header,value)</p>
<blockquote>
<p>header: 规定头的名称<br>value: 规定头的值</p>
</blockquote>
<h3 id="XMLHttpRequest对象的属性"><a href="#XMLHttpRequest对象的属性" class="headerlink" title="XMLHttpRequest对象的属性"></a>XMLHttpRequest对象的属性</h3><p>onreadystatechange  当 readyState 属性改变时，就会触发该事件</p>
<p>readyState     存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。</p>
<blockquote>
<p>0: 请求未初始化<br>1: 服务器连接已建立<br>2: 请求已接收<br>3: 请求处理中<br>4: 请求已完成，且响应已就绪</p>
</blockquote>
<p>status    </p>
<blockquote>
<p>200: “OK”<br>300~307: 重定向类<br>40<em>: 请求错误<br>50</em>: 服务器错误</p>
</blockquote>
<h2 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h2><blockquote>
<p>responseText    获得字符串形式的响应数据。<br>responseXML    获得 XML 形式的响应数据。</p>
</blockquote>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//创建XMLHttpRequest对象</div><div class="line">var xmlHttp = new XMLHttpRequest();</div><div class="line"></div><div class="line">//配置XMLHttpRequest对象</div><div class="line">xmlHttp.open(<span class="string">"get"</span>, <span class="string">"url?key=value"</span>);</div><div class="line"></div><div class="line">//设置回调函数</div><div class="line">xmlHttp.onreadystatechange = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="keyword">if</span> (xmlHttp.readyState == 4 &amp;&amp; xmlHttp.status == 200) &#123;</div><div class="line">        var result= xmlHttp.responseText;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//发送请求</div><div class="line">xmlHttp.send(null);</div></pre></td></tr></table></figure>
<h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//创建XMLHttpRequest对象</div><div class="line">var xmlHttp = new XMLHttpRequest();</div><div class="line"></div><div class="line">//配置XMLHttpRequest对象</div><div class="line">xmlHttp.open(<span class="string">"post"</span>, <span class="string">"url"</span>, data);</div><div class="line"></div><div class="line">//设置回调函数</div><div class="line">xmlHttp.onreadystatechange = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="keyword">if</span> (xmlHttp.readyState == 4 &amp;&amp; xmlHttp.status == 200) &#123;</div><div class="line">        var result= xmlHttp.responseText;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//发送请求</div><div class="line">xmlHttp.send(data);</div></pre></td></tr></table></figure>
<h2 id="ajax简单封装实例"><a href="#ajax简单封装实例" class="headerlink" title="ajax简单封装实例"></a>ajax简单封装实例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">	<span class="keyword">function</span> ajax(config) &#123;</div><div class="line"></div><div class="line">	  	var xhr = null;</div><div class="line">	  	try&#123;</div><div class="line">			xhr = new XMLHttpRequest();</div><div class="line">	  	&#125;catch(e)&#123;</div><div class="line">			try&#123;</div><div class="line">				xhr = new ActiveXObject(<span class="string">'MSXML2.XMLHttp'</span>);</div><div class="line">			&#125;catch(e)&#123;</div><div class="line">				xhr = new ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		var date = new Date();</div><div class="line">	  	config.url = config.url + <span class="string">'?timestamp='</span> + date.getTime();</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (config.method === <span class="string">'get'</span>) &#123;</div><div class="line">			var arr = [];</div><div class="line">			<span class="keyword">for</span> (var i <span class="keyword">in</span> config.data) &#123;</div><div class="line">			    arr.push(encodeURIComponent(i) + <span class="string">'='</span> + encodeURIComponent(config.data[i]));</div><div class="line">		  	&#125;</div><div class="line">		  	config.data = arr.join(<span class="string">'&amp;'</span>)</div><div class="line">		    config.url += config.data; </div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (config.async === <span class="literal">true</span>) &#123; </div><div class="line">		    xhr.onreadystatechange = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">		      	<span class="keyword">if</span> (xhr.readyState == 4) &#123;</div><div class="line">		        	callback();</div><div class="line">		      	&#125;</div><div class="line">		    &#125;;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	  	xhr.open(config.method, config.url, config.async);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (config.method === <span class="string">'post'</span>) &#123;</div><div class="line">		    xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/json'</span>);</div><div class="line">		    xhr.send(JSON.stringify(config.data));</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">		    xhr.send(null);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (config.async === <span class="literal">false</span>) &#123;</div><div class="line">		    callback();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">function</span> <span class="function"><span class="title">callback</span></span>() &#123;</div><div class="line">		    <span class="keyword">if</span> (xhr.status == 200) &#123;</div><div class="line">		      	config.success(xhr.responseText);</div><div class="line">		    &#125; <span class="keyword">else</span> &#123;</div><div class="line">		      	alert(<span class="string">'获取数据错误！错误代号：'</span> + xhr.status + <span class="string">'，错误信息：'</span> + xhr.statusText);</div><div class="line">		    &#125;	</div><div class="line">		&#125;</div><div class="line">	&#125;	</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      数据交互与dom操作并列前端两大基石
    
    </summary>
    
      <category term="心得" scheme="http://106.15.95.246/categories/%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="javascript" scheme="http://106.15.95.246/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>form对象</title>
    <link href="http://106.15.95.246/2017/07/02/form%E5%AF%B9%E8%B1%A1/"/>
    <id>http://106.15.95.246/2017/07/02/form对象/</id>
    <published>2017-07-02T05:32:00.000Z</published>
    <updated>2017-07-02T05:35:39.588Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<p>&lt;form&gt; 标签用于为用户输入创建 HTML 表单。<br>表单能够包含 input 元素，比如文本字段、复选框、单选框、提交按钮等等。<br>表单还可以包含 menus、textarea、fieldset、legend 和 label 元素。<br>表单用于向服务器传输数据。<br><a id="more"></a></p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form action=<span class="string">"url"</span> enctype=<span class="string">"multipart/form-data"</span> name=<span class="string">"form1"</span> target=<span class="string">"_blank"</span> method=<span class="string">"get"</span> &gt;</div><div class="line">  &lt;p&gt;First name: &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"fname"</span> /&gt;&lt;/p&gt;</div><div class="line">  &lt;p&gt;Last name: &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"lname"</span> /&gt;&lt;/p&gt;</div><div class="line">  &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"Submit"</span> /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<h2 id="form元素属性"><a href="#form元素属性" class="headerlink" title="form元素属性"></a>form元素属性</h2><table class="table table-bordered table-striped table-condensed"><tr><th>属性</th><th>值</th><th>描述</th></tr><tr><td>accept-charset</td><td>charset_list</td><td>规定服务器可处理的表单数据字符集。</td></tr><tr><td>action</td><td>URL</td><td>规定当提交表单时向何处发送表单数据。</td></tr><tr><td rowspan="2">autocomplete</td><td>on</td><td rowspan="2">规定是否启用表单的自动完成功能。</td></tr><tr><td>off</td></tr><tr><td rowspan="2">method</td><td>get</td><td rowspan="2">规定用于发送 form-data 的 HTTP 方法。</td></tr><tr><td>post</td></tr><tr><td>name</td><td>form_name</td><td>规定表单的名称。</td></tr><tr><td rowspan="5">target</td><td>_blank</td><td rowspan="5">规定在何处打开 action URL。</td></tr><tr><td>_self</td></tr><tr><td>_parent</td></tr><tr><td>_top</td></tr><tr><td>framename</td></tr><tr><td rowspan="3">enctype</td><td>application/x-www-form-urlencoded</td><td rowspan="3"></td></tr><tr><td>multipart/form-data</td></tr><tr><td>text/plain</td></tr></table>

<h2 id="Form-对象"><a href="#Form-对象" class="headerlink" title="Form 对象"></a>Form 对象</h2><p>Form 对象代表一个 HTML 表单。<br>在 HTML 文档中&lt;form&gt; 每出现一次，Form 对象就会被创建。</p>
<h2 id="Form-对象属性"><a href="#Form-对象属性" class="headerlink" title="Form 对象属性"></a>Form 对象属性</h2><table class="table table-bordered table-striped table-condensed"><tr><th>属性</th><th>描述</th></tr><tr><td>acceptCharset</td><td>服务器可接受的字符集。</td></tr><tr><td>action</td><td>设置或返回表单的 action 属性。</td></tr><tr><td>enctype</td><td>设置或返回表单用来编码内容的 MIME 类型。</td></tr><tr><td>id</td><td>设置或返回表单的 id。</td></tr><tr><td>length</td><td>返回表单中的元素数目。</td></tr><tr><td>method</td><td>设置或返回将数据发送到服务器的 HTTP 方法。</td></tr><tr><td>name</td><td>设置或返回表单的名称。</td></tr><tr><td>target </td><td>设置或返回表单提交结果的 Frame 或 Window 名。</td></tr></table>

<h2 id="Form-对象方法-句柄"><a href="#Form-对象方法-句柄" class="headerlink" title="Form 对象方法/句柄"></a>Form 对象方法/句柄</h2><p>submit()    提交表单。<br>onsubmit    在提交表单之前调用。</p>
]]></content>
    
    <summary type="html">
    
      数据交互与dom操作并列前端两大基石
    
    </summary>
    
      <category term="心得" scheme="http://106.15.95.246/categories/%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="html" scheme="http://106.15.95.246/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>浅谈onerror</title>
    <link href="http://106.15.95.246/2017/07/02/%E6%B5%85%E8%B0%88onerror/"/>
    <id>http://106.15.95.246/2017/07/02/浅谈onerror/</id>
    <published>2017-07-02T04:55:09.000Z</published>
    <updated>2017-07-02T04:56:03.448Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<p>onerror 事件会在文档或图像加载过程中发生错误时被触发，或者页面中出现脚本错误，也会产生 onerror 事件。<br>如果需要利用 onerror 事件，就必须创建一个处理错误的函数。你可以把这个函数叫作 onerror 事件处理器 (onerror event handler)。这个事件处理器使用三个参数来调用：msg（错误消息）、url（发生错误的页面的 url）、line（发生错误的代码行）。同样，你也可以不使用他们。<br><a id="more"></a></p>
<h2 id="监听脚本错误"><a href="#监听脚本错误" class="headerlink" title="监听脚本错误"></a>监听脚本错误</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">	&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">	&lt;title&gt;Document&lt;/title&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">		onerror=handleErr</div><div class="line">		var txt=<span class="string">""</span></div><div class="line">		<span class="keyword">function</span> handleErr(msg,url,l)</div><div class="line">		&#123;</div><div class="line">			txt=<span class="string">"There was an error on this page.\n\n"</span></div><div class="line">			txt+=<span class="string">"Error: "</span> + msg + <span class="string">"\n"</span></div><div class="line">			txt+=<span class="string">"URL: "</span> + url + <span class="string">"\n"</span></div><div class="line">			txt+=<span class="string">"Line: "</span> + l + <span class="string">"\n\n"</span></div><div class="line">			txt+=<span class="string">"Click OK to continue.\n\n"</span></div><div class="line">			alert(txt)</div><div class="line">			<span class="built_in">return</span> <span class="literal">true</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">function</span> <span class="function"><span class="title">message</span></span>()</div><div class="line">		&#123;</div><div class="line">			alertdddlert(<span class="string">"Welcome guest!"</span>)</div><div class="line">		&#125;</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"View message"</span> onclick=<span class="string">"message()"</span> /&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="监听资源加载"><a href="#监听资源加载" class="headerlink" title="监听资源加载"></a>监听资源加载</h2><p>如果装载图像时发生了错误，则显示一个对话框：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=<span class="string">"image.gif"</span> onerror=<span class="string">"alert('The image could not be loaded.')"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>支持该事件的 HTML 标签：</p>
<blockquote>
<p>&lt;img&gt;,&lt;script&gt; , &lt;link&gt; 等</p>
</blockquote>
<h2 id="使用onerror加载图片"><a href="#使用onerror加载图片" class="headerlink" title="使用onerror加载图片"></a>使用onerror加载图片</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">	&lt;title&gt;Document&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;img src=<span class="string">"1.jpg"</span> id=<span class="string">'image'</span> onerror=<span class="string">"setimg()"</span> alt=<span class="string">"pic"</span> style=<span class="string">'background-image: url(2.jpg)'</span> /&gt;</div><div class="line">	&lt;script&gt;</div><div class="line">	<span class="keyword">function</span> <span class="function"><span class="title">setimg</span></span>()&#123;</div><div class="line">		var d_image = document.getElementById(<span class="string">'image'</span>);</div><div class="line">		d_image .setAttribute(<span class="string">'src'</span>,<span class="string">'3.jpg'</span>);</div><div class="line">		d_image .onerror = <span class="string">''</span>;</div><div class="line">	&#125;</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>利用3张图片，保证在加载第三方资源时不会因为无资源出现UI问题;同样也可以利用onerror监听js、css文件加载，实现二次请求。以及监听jsonp失败。</p>
<h2 id="参考内容："><a href="#参考内容：" class="headerlink" title="参考内容："></a>参考内容：</h2><p><a href="http://www.w3school.com.cn/jsref/event_onerror.asp" target="_blank" rel="external">W3C_onerror事件</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;p&gt;onerror 事件会在文档或图像加载过程中发生错误时被触发，或者页面中出现脚本错误，也会产生 onerror 事件。&lt;br&gt;如果需要利用 onerror 事件，就必须创建一个处理错误的函数。你可以把这个函数叫作 onerror 事件处理器 (onerror event handler)。这个事件处理器使用三个参数来调用：msg（错误消息）、url（发生错误的页面的 url）、line（发生错误的代码行）。同样，你也可以不使用他们。&lt;br&gt;
    
    </summary>
    
    
      <category term="html" scheme="http://106.15.95.246/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>threejs基础</title>
    <link href="http://106.15.95.246/2017/06/30/threejs/"/>
    <id>http://106.15.95.246/2017/06/30/threejs/</id>
    <published>2017-06-30T02:07:16.000Z</published>
    <updated>2017-07-01T09:25:39.429Z</updated>
    
    <content type="html"><![CDATA[<p>Threejs中3个基础元素是场景（scene）、相机（camera）和渲染器（renderer）。</p>
<a id="more"></a>
<h4 id="1-场景"><a href="#1-场景" class="headerlink" title="1.场景"></a>1.场景</h4><p>场景是所有物体的容器，用THREE.Scene来表示。</p>
<p>构件一个场景</p>
<pre><code>var scene = new THREE.Scene();
</code></pre><h4 id="2-相机"><a href="#2-相机" class="headerlink" title="2.相机"></a>2.相机</h4><p>相机决定了场景中第一视角的位置。<br>相机的种类：<br>透视相机（THREE.PerspectiveCamera）</p>
<pre><code>var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
</code></pre><h4 id="3-渲染器"><a href="#3-渲染器" class="headerlink" title="3.渲染器"></a>3.渲染器</h4><p> 渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制。</p>
<pre><code>var renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
</code></pre><h4 id="4-添加物体到场景中"><a href="#4-添加物体到场景中" class="headerlink" title="4.添加物体到场景中"></a>4.添加物体到场景中</h4><pre><code>/*创建一个物体*/
var geometry = new THREE.CubeGeometry(1,1,1); 
var material = new THREE.MeshBasicMaterial({color: 0x00ff00});
/*为物体添加细节*/
var cube = new THREE.Mesh(geometry, material);
/*将物体添加到场景中*/
scene.add(cube);
</code></pre><h4 id="5-渲染"><a href="#5-渲染" class="headerlink" title="5.渲染"></a>5.渲染</h4><pre><code>/*使用渲染器，结合相机和场景*/
renderer.render(scene, camera);
/*渲染函数的原型*/
render( scene, camera, renderTarget, forceClear )
/*
scene：前面定义的场景
camera：前面定义的相机
renderTarget：渲染的目标，默认是渲染到前面定义的render变量中
forceClear：每次绘制之前都将画布的内容给清除，即使自动清除标志autoClear为false，也会清除。
*/
</code></pre><h4 id="6-渲染循环"><a href="#6-渲染循环" class="headerlink" title="6.渲染循环"></a>6.渲染循环</h4><p>渲染有两种方式：实时渲染和离线渲染 。</p>
<pre><code>/*实时渲染（游戏循环）*/
function render() {
    cube.rotation.x += 0.1;
    cube.rotation.y += 0.1;
    renderer.render(scene, camera);
    requestAnimationFrame(render);
}
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;style&gt;canvas &#123; width: 100%; height: 100% &#125;&lt;/style&gt;</div><div class="line">    &lt;script src=<span class="string">"js/three.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">        var scene = new THREE.Scene();</div><div class="line">        </div><div class="line">        var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);</div><div class="line">        </div><div class="line">        var renderer = new THREE.WebGLRenderer();</div><div class="line">        </div><div class="line">        renderer.setSize(window.innerWidth, window.innerHeight);</div><div class="line">        </div><div class="line">        document.body.appendChild(renderer.domElement);</div><div class="line">        var geometry = new THREE.CubeGeometry(1,1,1);</div><div class="line">        var material = new THREE.MeshBasicMaterial(&#123;color: 0x00ff00&#125;);</div><div class="line">        var cube = new THREE.Mesh(geometry, material); </div><div class="line">        scene.add(cube);</div><div class="line">        camera.position.z = 5;</div><div class="line">        <span class="keyword">function</span> <span class="function"><span class="title">render</span></span>() &#123;</div><div class="line">            requestAnimationFrame(render);</div><div class="line">            cube.rotation.x += 0.1;</div><div class="line">            cube.rotation.y += 0.1;</div><div class="line">            renderer.render(scene, camera);</div><div class="line">        &#125;</div><div class="line">        render();</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Threejs中3个基础元素是场景（scene）、相机（camera）和渲染器（renderer）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://106.15.95.246/tags/javascript/"/>
    
      <category term="threejs" scheme="http://106.15.95.246/tags/threejs/"/>
    
      <category term="webGL" scheme="http://106.15.95.246/tags/webGL/"/>
    
  </entry>
  
  <entry>
    <title>meta标签用法总结</title>
    <link href="http://106.15.95.246/2017/06/29/meta%E6%A0%87%E7%AD%BE%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://106.15.95.246/2017/06/29/meta标签用法总结/</id>
    <published>2017-06-29T09:16:57.000Z</published>
    <updated>2017-06-30T03:25:53.214Z</updated>
    
    <content type="html"><![CDATA[<p><meta>标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</p>
<a id="more"></a>
<h5 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h5><pre><code>关键字： 
    &lt;meta name=&quot;keywords&quot; content=&quot;your tags&quot; /&gt;
描述： 
    &lt;meta name=&quot;description&quot; content=&quot;150 words&quot; /&gt;
搜索引擎索引方式：
    &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt;
     &lt;!--
         all：文件将被检索，且页面上的链接可以被查询；
         none：文件将不被检索，且页面上的链接不可以被查询；
         index：文件将被检索；
         follow：页面上的链接可以被查询；
         noindex：文件将不被检索；
         nofollow：页面上的链接不可以被查询。
      --&gt;
页面重定向和刷新：
    &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=&quot; /&gt;
定义网页作者：
    &lt;meta name=&quot;author&quot; content=&quot;author name&quot; /&gt;
</code></pre><h5 id="移动设备"><a href="#移动设备" class="headerlink" title="移动设备"></a>移动设备</h5><pre><code>viewport：
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no&quot;/&gt;
    &lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边  --&gt;
    width：宽度（数值 / device-width）（范围从200 到10,000，默认为980 像素）
    height：高度（数值 / device-height）（范围从223 到10,000）
    initial-scale：初始的缩放比例 （范围从&gt;0 到10）
    minimum-scale：允许用户缩放到的最小比例
    maximum-scale：允许用户缩放到的最大比例
    user-scalable：用户是否可以手动缩 (no,yes)
WebApp全屏模式：
    伪装app，离线应用   
    &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt; &lt;!-- 启用 WebApp 全屏模式 --&gt;
隐藏状态栏/设置状态栏颜色：
    只有在开启WebApp全屏模式时才生效。
    content的值为default | black | black-translucent 。
    &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black-translucent&quot; /&gt;
添加到主屏后的标题：
    &lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题&quot;&gt;
忽略数字自动识别为电话号码：
    &lt;meta content=&quot;telephone=no&quot; name=&quot;format-detection&quot; /&gt; 
忽略识别邮箱：
    &lt;meta content=&quot;email=no&quot; name=&quot;format-detection&quot; /&gt;
添加智能 App 广告条 Smart App Banner：
    告诉浏览器这个网站对应的app，并在页面上显示下载banner。
    &lt;meta name=&quot;apple-itunes-app&quot; 
    content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt; 
其他：
    &lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;
    &lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;
    &lt;!-- 微软的老式浏览器 --&gt;
    &lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;
    &lt;!-- uc强制竖屏 --&gt;
    &lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;
    &lt;!-- QQ强制竖屏 --&gt;
    &lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;
    &lt;!-- UC强制全屏 --&gt;
    &lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;
    &lt;!-- QQ强制全屏 --&gt;
    &lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;
    &lt;!-- UC应用模式 --&gt;
    &lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;
    &lt;!-- QQ应用模式 --&gt;
    &lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;
    &lt;!-- windows phone 点击无高光 --&gt;
    &lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;
</code></pre><h5 id="网页相关"><a href="#网页相关" class="headerlink" title="网页相关"></a>网页相关</h5><pre><code>申明编码：
    &lt;meta charset=&apos;utf-8&apos; /&gt;
优先使用 IE 最新版本和 Chrome：
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;
&lt;!-- 关于X-UA-Compatible --&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=6&quot; &gt;&lt;!-- 使用IE6 --&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=7&quot; &gt;&lt;!-- 使用IE7 --&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=8&quot; &gt;&lt;!-- 使用IE8 --&gt;
浏览器内核控制：
    国内浏览器很多都是双内核（webkit和Trident），webkit内核高速浏览，IE内核兼容网页和旧版网站。
    而添加meta标签的网站可以控制浏览器选择何种内核渲染。
    &lt;meta name=&quot;renderer&quot; content=&quot;webkit|ie-comp|ie-stand&quot;&gt;
国内双核浏览器默认内核模式如下：
    1. 搜狗高速浏览器、QQ浏览器：IE内核（兼容模式）
    2. 360极速浏览器、遨游浏览器：Webkit内核（极速模式）

禁止浏览器从本地计算机的缓存中访问页面内容：这样设定，访问者将无法脱机浏览。
    &lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot;&gt;
Windows 8
    &lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#000&quot;/&gt; &lt;!-- Windows 8 磁贴颜色 --&gt;
    &lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;icon.png&quot;/&gt; &lt;!-- Windows 8 磁贴图标 --&gt;
站点适配：主要用于PC-手机页的对应关系。
    &lt;meta name=&quot;mobile-agent&quot;content=&quot;format=[wml|xhtml|html5]; url=url&quot;&gt;
    &lt;!--
    [wml|xhtml|html5]根据手机页的协议语言，选择其中一种；
    url=&quot;url&quot; 后者代表当前PC页所对应的手机页URL，两者必须是一一对应关系。
    --&gt;
转码申明：用百度打开网页可能会对其进行转码（比如贴广告），避免转码可添加如下meta
    &lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-siteapp&quot; /&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;meta&gt;标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。&lt;/p&gt;
    
    </summary>
    
    
      <category term="html" scheme="http://106.15.95.246/tags/html/"/>
    
      <category term="meta" scheme="http://106.15.95.246/tags/meta/"/>
    
  </entry>
  
  <entry>
    <title>图片预览及Image对象总结</title>
    <link href="http://106.15.95.246/2017/06/29/%E5%9B%BE%E7%89%87%E9%A2%84%E8%A7%88%E5%8F%8AImage%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93/"/>
    <id>http://106.15.95.246/2017/06/29/图片预览及Image对象总结/</id>
    <published>2017-06-29T08:32:54.000Z</published>
    <updated>2017-06-30T02:43:08.376Z</updated>
    
    <content type="html"><![CDATA[<p>图片预览简单实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</div><div class="line">&lt;title&gt;图片预览&lt;/title&gt;</div><div class="line">&lt;script&gt;</div><div class="line">function previewFile() &#123;</div><div class="line"> var preview = document.querySelector(&apos;img&apos;);</div><div class="line"> var file  = document.querySelector(&apos;input[type=file]&apos;).files[0];</div><div class="line"> var reader = new FileReader();</div><div class="line"> reader.onloadend = function () &#123;</div><div class="line">  preview.src = reader.result;</div><div class="line"> &#125;</div><div class="line"> if (file) &#123;</div><div class="line">  reader.readAsDataURL(file);</div><div class="line"> &#125; else &#123;</div><div class="line">  preview.src = &quot;&quot;;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;input type=&quot;file&quot; onchange=&quot;previewFile()&quot;&gt;&lt;br&gt;</div><div class="line">&lt;img src=&quot;&quot; height=&quot;200&quot; width=&quot;300&quot; alt=&quot;Image preview...&quot;/&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>1、FileReader接口的方法</p>
<p>FileReader接口有4个方法，其中3个用来读取文件，另一个用来中断读取。无论读取成功或失败，方法并不会返回读取结果，这一结果存储在result属性中。</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>readAsBinaryString</td>
<td>file</td>
<td>将文件读取为二进制编码</td>
</tr>
<tr>
<td>readAsText</td>
<td>file,[encoding]</td>
<td>将文件读取为文本</td>
</tr>
<tr>
<td>readAsDataURL</td>
<td>file</td>
<td>将文件读取为DataURL</td>
</tr>
<tr>
<td>abort</td>
<td>(none)</td>
<td>终端读取操作</td>
</tr>
</tbody>
</table>
<p>2、FileReader接口事件<br>FileReader接口包含了一套完整的事件模型，用于捕获读取文件时的状态。</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>onabort</td>
<td>中断</td>
</tr>
<tr>
<td>onerror</td>
<td>出错</td>
</tr>
<tr>
<td>onloadstart</td>
<td>开始</td>
</tr>
<tr>
<td>onprogress</td>
<td>正在读取</td>
</tr>
<tr>
<td>onload</td>
<td>成功读取</td>
</tr>
<tr>
<td>onloadend</td>
<td>读取完成，无论成功失败</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;  </div><div class="line">var result=document.getElementById(<span class="string">"result"</span>);  </div><div class="line">var file=document.getElementById(<span class="string">"file"</span>);  </div><div class="line">  </div><div class="line">//判断浏览器是否支持FileReader接口  </div><div class="line"><span class="keyword">if</span>(typeof FileReader == <span class="string">'undefined'</span>)&#123;  </div><div class="line">    result.InnerHTML=<span class="string">"&lt;p&gt;你的浏览器不支持FileReader接口！&lt;/p&gt;"</span>;  </div><div class="line">    //使选择控件不可操作  </div><div class="line">    file.setAttribute(<span class="string">"disabled"</span>,<span class="string">"disabled"</span>);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">readAsDataURL</span></span>()&#123;  </div><div class="line">    //检验是否为图像文件  </div><div class="line">    var file = document.getElementById(<span class="string">"file"</span>).files[0];  </div><div class="line">    <span class="keyword">if</span>(!/image\/\w+/.<span class="built_in">test</span>(file.type))&#123;  </div><div class="line">        alert(<span class="string">"看清楚，这个需要图片！"</span>);  </div><div class="line">        <span class="built_in">return</span> <span class="literal">false</span>;  </div><div class="line">    &#125;  </div><div class="line">    var reader = new FileReader();  </div><div class="line">    //将文件以Data URL形式读入页面  </div><div class="line">    reader.readAsDataURL(file);  </div><div class="line">    reader.onload=<span class="keyword">function</span>(e)&#123;  </div><div class="line">        var result=document.getElementById(<span class="string">"result"</span>);  </div><div class="line">        //显示文件  </div><div class="line">        result.innerHTML=<span class="string">'&lt;img src="'</span> + this.result +<span class="string">'" alt="" /&gt;'</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">readAsBinaryString</span></span>()&#123;  </div><div class="line">    var file = document.getElementById(<span class="string">"file"</span>).files[0];  </div><div class="line">    var reader = new FileReader();  </div><div class="line">    //将文件以二进制形式读入页面  </div><div class="line">    reader.readAsBinaryString(file);  </div><div class="line">    reader.onload=<span class="keyword">function</span>(f)&#123;  </div><div class="line">        var result=document.getElementById(<span class="string">"result"</span>);  </div><div class="line">        //显示文件  </div><div class="line">        result.innerHTML=this.result;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">readAsText</span></span>()&#123;  </div><div class="line">    var file = document.getElementById(<span class="string">"file"</span>).files[0];  </div><div class="line">    var reader = new FileReader();  </div><div class="line">    //将文件以文本形式读入页面  </div><div class="line">    reader.readAsText(file);  </div><div class="line">    reader.onload=<span class="keyword">function</span>(f)&#123;  </div><div class="line">        var result=document.getElementById(<span class="string">"result"</span>);  </div><div class="line">        //显示文件  </div><div class="line">        result.innerHTML=this.result;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">&lt;/script&gt;  </div><div class="line">&lt;p&gt;  </div><div class="line">    &lt;label&gt;请选择一个文件：&lt;/label&gt;  </div><div class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"file"</span> id=<span class="string">"file"</span> /&gt;  </div><div class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"读取图像"</span> onclick=<span class="string">"readAsDataURL()"</span> /&gt;  </div><div class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"读取二进制数据"</span> onclick=<span class="string">"readAsBinaryString()"</span> /&gt;  </div><div class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"读取文本文件"</span> onclick=<span class="string">"readAsText()"</span> /&gt;  </div><div class="line">&lt;/p&gt;  </div><div class="line">&lt;div id=<span class="string">"result"</span> name=<span class="string">"result"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图片预览简单实现&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;title&amp;gt;图片预览&amp;lt;/title&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function previewFile() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; var preview = document.querySelector(&amp;apos;img&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; var file  = document.querySelector(&amp;apos;input[type=file]&amp;apos;).files[0];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; var reader = new FileReader();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; reader.onloadend = function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  preview.src = reader.result;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; if (file) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  reader.readAsDataURL(file);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125; else &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  preview.src = &amp;quot;&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;input type=&amp;quot;file&amp;quot; onchange=&amp;quot;previewFile()&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;img src=&amp;quot;&amp;quot; height=&amp;quot;200&amp;quot; width=&amp;quot;300&amp;quot; alt=&amp;quot;Image preview...&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="html" scheme="http://106.15.95.246/tags/html/"/>
    
      <category term="javascript" scheme="http://106.15.95.246/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>CSS基础</title>
    <link href="http://106.15.95.246/2017/06/29/CSS%E5%9F%BA%E7%A1%80/"/>
    <id>http://106.15.95.246/2017/06/29/CSS基础/</id>
    <published>2017-06-29T05:32:09.000Z</published>
    <updated>2017-06-30T12:13:45.371Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-CSS-背景"><a href="#1-CSS-背景" class="headerlink" title="1.CSS 背景"></a>1.CSS 背景</h4><pre><code>颜色 background-color         rgba/十六进制/red
图片 background-image         url(&quot;img.png&quot;)
重复 background-repeat        no-repeat/repeat-x
滚动 background-attachment    scroll/fixed
定位 background-position      left top/0 0/50% 50%
尺寸 background-size           |contain;
定位 background-origin        padding-box|border-box|content-box;
区域 background-clip          border-box|padding-box|content-box;
</code></pre><a id="more"></a>
<h4 id="2-CSS-文本格式"><a href="#2-CSS-文本格式" class="headerlink" title="2.CSS 文本格式"></a>2.CSS 文本格式</h4><pre><code>文本颜色    color    
文本方向    direction              ltr/rtl
字符间距    letter-spacing    
文本行高    line-height            数字乘字体尺寸来设置行间距
文本对齐    text-align             justify/left/right/center
文本修饰    text-decoration        underline/overline/line-through/blink
首行缩进    text-indent            
文本阴影    text-shadow            h-shadow v-shadow blur color
控制字母    text-transform         capitalize/uppercase/lowercase
文本重写    unicode-bidi           bidi-override
垂直对齐    vertical-align         sub/super/top/middle/bottom
空白处理    white-space            pre/nowrap/pre-wrap/pre-line
汉字间距    word-spacing    
text-overflow   ellipsis
word-wrap   break-word  指定如果足够长得话，应该换行：
word-break  break-all    允许在单词内换行。
</code></pre><h4 id="3-CSS-字体"><a href="#3-CSS-字体" class="headerlink" title="3.CSS 字体"></a>3.CSS 字体</h4><pre><code>文本字体 font &quot;font-style font-variant font-weight font-size/line-height font-family&quot;
文本字体系列 font-family    
文本字体大小 font-size    
文本字体样式 font-style     italic/oblique
以小型大写字体或者正常字体显示文本 font-variant    
字体粗细 font-weight normal 400/blod 500
@font-face 规则
@font-face{
    font-family: myFirstFont;
    src: url(sansation_light.woff);
} 
div{font-family:myFirstFont;}
</code></pre><h4 id="4-CSS-链接"><a href="#4-CSS-链接" class="headerlink" title="4.CSS 链接"></a>4.CSS 链接</h4><pre><code>a:link {color:#000000;}      /* 未访问链接*/
a:visited {color:#00FF00;}  /* 已访问链接 */
a:hover {color:#FF00FF;}  /* 鼠标移动到链接上 */
a:active {color:#0000FF;}  /* 鼠标点击时 */
</code></pre><h4 id="5-CSS-列表"><a href="#5-CSS-列表" class="headerlink" title="5.CSS 列表"></a>5.CSS 列表</h4><pre><code>列表项标记浏览器兼容性解决方案
ul{
    list-style-type: none;
    padding: 0px;
    margin: 0px;
}
ul li{
    background-image: url(sqpurple.gif);
    background-repeat: no-repeat;
    background-position: 0px 5px; 
    padding-left: 14px; 
}

list-style    简写属性。用于把所有用于列表的属性设置于一个声明中
list-style-image    将图象设置为列表项标志。
list-style-position    设置列表中列表项标志的位置。
list-style-type    设置列表项标志的类型。
</code></pre><h4 id="6-CSS-盒子模型"><a href="#6-CSS-盒子模型" class="headerlink" title="6.CSS 盒子模型"></a>6.CSS 盒子模型</h4><pre><code>width浏览器的兼容性问题
根据 W3C 的规范，元素内容占据的空间是由 width 属性设置的，
而内容周围的 padding 和 border 值是另外计算的。
不幸的是，IE5.X 和 6 在怪异模式中使用自己的非标准模型。
这些浏览器的 width 属性不是内容的宽度，
而是内容、内边距和边框的宽度的总和。
···
解决方式
不要给元素添加具有指定宽度的内边距，
而是尝试将内边距或外边距添加到元素的父元素和子元素。

浏览器的兼容性问题
IE8 及更早IE版本不支持 填充的宽度和边框的宽度属性设。
···
解决方式
解决IE8及更早版本不兼容问题可以在HTML页面声明 &lt;!DOCTYPE html&gt;即可。
</code></pre><h4 id="7-CSS-边框"><a href="#7-CSS-边框" class="headerlink" title="7.CSS 边框"></a>7.CSS 边框</h4><pre><code>边框样式    border-style dotted 点线/dashed 虚线/solid 实线
圆角 border-radius
盒阴影 box-shadow &quot;h-shadow v-shadow blur spread color inset&quot;
边界图片 border-image &quot;source slice width outset repeat&quot;
</code></pre><h4 id="8-CSS-轮廓"><a href="#8-CSS-轮廓" class="headerlink" title="8.CSS 轮廓"></a>8.CSS 轮廓</h4><pre><code>outline
</code></pre><h4 id="9-CSS-Display-显示-与Visibility（可见性）"><a href="#9-CSS-Display-显示-与Visibility（可见性）" class="headerlink" title="9.CSS Display(显示) 与Visibility（可见性）"></a>9.CSS Display(显示) 与Visibility（可见性）</h4><pre><code>Display
none    此元素不会被显示。
block    此元素将显示为块级元素，此元素前后会带有换行符。
inline    默认。此元素会被显示为内联元素，元素前后没有换行符。
inline-block 行内块元素
...
Visibility
hidden 隐藏但是空间被占据
</code></pre><h4 id="10-CSS-Positioning-定位"><a href="#10-CSS-Positioning-定位" class="headerlink" title="10.CSS Positioning(定位)"></a>10.CSS Positioning(定位)</h4><pre><code>static  默认值，即没有定位，在文档流中
relative    相对其正常位置。
fixed   相对于浏览器窗口是固定位置。
absolute    相对于最近的已定位父元素或者html
</code></pre><p>px:Fixed 定位在 IE7 和 IE8 下需要描述 !DOCTYPE 才能支持.</p>
<h4 id="11-CSS-Float-浮动"><a href="#11-CSS-Float-浮动" class="headerlink" title="11.CSS Float(浮动)"></a>11.CSS Float(浮动)</h4><pre><code>一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。
浮动元素之后的元素将围绕它。

left    元素向左浮动。
right   元素向右浮动。

px:clear 清除浮动
</code></pre><h4 id="12-CSS-clip-属性"><a href="#12-CSS-clip-属性" class="headerlink" title="12.CSS clip 属性"></a>12.CSS clip 属性</h4><pre><code>裁剪一张图像：
img 
{
position:absolute;
clip:rect(0px,60px,200px,0px);
}
</code></pre><h4 id="13-CSS-水平对齐-Horizontal-Align"><a href="#13-CSS-水平对齐-Horizontal-Align" class="headerlink" title="13.CSS 水平对齐(Horizontal Align)"></a>13.CSS 水平对齐(Horizontal Align)</h4><pre><code>在IE8中使用margin:auto属性无法正常工作，除非声明 !DOCTYPE

IE5中块元素有一个margin处理BUG。在IE5中，需要添加一些额外的代码
.container{text-align:center;}
.center{
margin-left:auto;
margin-right:auto;
width:70%;
background-color:#b0e0e6;
text-align:left;}

IE8和早期有一个问题，当使用position属性时。
如果一个容器元素（在本例中&lt;div class=&quot;container&quot;&gt;）指定的宽度，
!DOCTYPE声明是缺失，IE8和早期版本会在右边增添17px的margin。
这似乎是一个滚动的预留空间。
使用position属性时始终设置在DOCTYPE声明中！

IE8和早期有一个问题，当使用position属性时。
如果一个容器元素（在本例中&lt;div class=&quot;container&quot;&gt;）指定的宽度，
!DOCTYPE声明是缺失，IE8和早期版本会在右边增添17px的margin。
这似乎是一个滚动的预留空间。
使用position属性时始终设置在DOCTYPE声明中！
float同样如此。
</code></pre><h4 id="14-CSS-组合选择符"><a href="#14-CSS-组合选择符" class="headerlink" title="14.CSS 组合选择符"></a>14.CSS 组合选择符</h4><pre><code>后代选取器(以空格分隔)
子元素选择器(以大于号分隔）
相邻兄弟选择器（以加号分隔）
普通兄弟选择器（以破折号分隔）
:first-child 伪类来选择元素的第一个子元素
q:lang(no) {quotes: &quot;~&quot; &quot;~&quot;;} 注意: 仅当 !DOCTYPE 已经声明时 IE8 支持 :lang.
</code></pre><h4 id="15-CSS-图像透明-不透明"><a href="#15-CSS-图像透明-不透明" class="headerlink" title="15.CSS 图像透明/不透明"></a>15.CSS 图像透明/不透明</h4><pre><code>opacity:0.4;
filter:alpha(opacity=40); /* IE8 及其更早版本 */
</code></pre><h4 id="16-CSS-媒体类型"><a href="#16-CSS-媒体类型" class="headerlink" title="16.CSS 媒体类型"></a>16.CSS 媒体类型</h4><pre><code>@media 规则
@media 规则允许在相同样式表为不同媒体设置不同的样式。
</code></pre><h4 id="17-CSS-属性-选择器"><a href="#17-CSS-属性-选择器" class="headerlink" title="17.CSS 属性 选择器"></a>17.CSS 属性 选择器</h4><pre><code>注意：IE7和IE8需声明!DOCTYPE才支持属性选择器！IE6和更低的版本不支持属性选择器。
</code></pre><h4 id="18-CSS3-渐变（Gradients）"><a href="#18-CSS3-渐变（Gradients）" class="headerlink" title="18.CSS3 渐变（Gradients）"></a>18.CSS3 渐变（Gradients）</h4><pre><code>background: linear-gradient(direction, color-stop1, color-stop2, ...);
background: linear-gradient(angle, color-stop1, color-stop2);
background: radial-gradient(center, shape size, start-color, ..., last-color)
</code></pre><h4 id="19-CSS3-2D-转换"><a href="#19-CSS3-2D-转换" class="headerlink" title="19.CSS3 2D 转换"></a>19.CSS3 2D 转换</h4><pre><code>transform 
translate(50px,100px) 
rotate(30deg)
scale(2,3)
skew(30deg,20deg)
matrix()
</code></pre><h4 id="20-CSS3-3D-转换"><a href="#20-CSS3-3D-转换" class="headerlink" title="20.CSS3 3D 转换"></a>20.CSS3 3D 转换</h4><pre><code>transform 
transform-style:preserve-3d;显示3D
perspective 透视距离
backface-visibility    定义元素在不面对屏幕时是否可见。
</code></pre><h4 id="21-CSS3-过渡"><a href="#21-CSS3-过渡" class="headerlink" title="21.CSS3 过渡"></a>21.CSS3 过渡</h4><pre><code>transition: property duration timing-function delay;
</code></pre><h4 id="22-CSS3-动画"><a href="#22-CSS3-动画" class="headerlink" title="22.CSS3 动画"></a>22.CSS3 动画</h4><pre><code>@keyframes 规则
@keyframes myfirst{
    from {background: red;}
    to {background: yellow;}
}
div
{
    animation-name: myfirst;
    animation-duration: 5s;
    animation-timing-function: linear;
    animation-delay: 2s;
    animation-iteration-count: infinite;
    animation-direction: alternate;
    animation-play-state: running;
}
animation: name duration timing-function delay 
            iteration-count direction fill-mode play-state;
</code></pre><h4 id="23-CSS3-box-sizing"><a href="#23-CSS3-box-sizing" class="headerlink" title="23.CSS3 box-sizing"></a>23.CSS3 box-sizing</h4><pre><code>border-box; 则 padding(内边距) 和 border(边框) 也包含在 width 和 height 中
</code></pre><h4 id="24-CSS3-弹性盒子-Flex-Box"><a href="#24-CSS3-弹性盒子-Flex-Box" class="headerlink" title="24.CSS3 弹性盒子(Flex Box)"></a>24.CSS3 弹性盒子(Flex Box)</h4><pre><code>弹性盒子内容
display: -webkit-flex;
flex-direction: row：横向从左到右排列（左对齐），默认的排列方式。
                row-reverse：反转横向排列（右对齐，从后往前排，最后一项排在最前面。
                column：纵向排列。
                column-reverse：反转纵向排列，从后往前排，最后一项排在最上面。
justify-content: flex-start | flex-end | center | space-between | space-around
align-items: flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。
             flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。
             center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。
             baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与&apos;flex-start&apos;等效。其它情况下，该值将参与基线对齐。
             stretch：如果指定侧轴大小的属性值为&apos;auto&apos;，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照&apos;min/max-width/height&apos;属性的限制。
flex-wrap: nowrap - 默认， 弹性容器为单行。该情况下弹性子项可能会溢出容器。
           wrap - 弹性容器为多行。该情况下弹性子项溢出的部分会被放置到新行，子项内部会发生断行
           wrap-reverse -反转 wrap 排列。
align-content: stretch - 默认。各行将会伸展以占用剩余的空间。
               flex-start - 各行向弹性盒容器的起始位置堆叠。
               flex-end - 各行向弹性盒容器的结束位置堆叠。
               center -各行向弹性盒容器的中间位置堆叠。
               space-between -各行在弹性盒容器中平均分布。
               space-around - 各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。
弹性子元素属性
order: &lt;integer&gt;：用整数值来定义排列顺序，数值小的排在前面。可以为负值。
完美的居中:
.flex-item {
  margin: auto;
}
align-self: auto：如果&apos;align-self&apos;的值为&apos;auto&apos;，则其计算值为元素的父元素的&apos;align-items&apos;值，如果其没有父元素，则计算值为&apos;stretch&apos;。
            flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。
            flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。
            center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。
            baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与&apos;flex-start&apos;等效。其它情况下，该值将参与基线对齐。
            stretch：如果指定侧轴大小的属性值为&apos;auto&apos;，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照&apos;min/max-width/height&apos;属性的限制。
flex: auto: 计算值为 1 1 auto
      initial: 计算值为 0 1 auto
      none：计算值为 0 0 auto
      inherit：从父元素继承
      [ flex-grow ]：定义弹性盒子元素的扩展比率。
      [ flex-shrink ]：定义弹性盒子元素的收缩比率。
      [ flex-basis ]：定义弹性盒子元素的默认基准值。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-CSS-背景&quot;&gt;&lt;a href=&quot;#1-CSS-背景&quot; class=&quot;headerlink&quot; title=&quot;1.CSS 背景&quot;&gt;&lt;/a&gt;1.CSS 背景&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;颜色 background-color         rgba/十六进制/red
图片 background-image         url(&amp;quot;img.png&amp;quot;)
重复 background-repeat        no-repeat/repeat-x
滚动 background-attachment    scroll/fixed
定位 background-position      left top/0 0/50% 50%
尺寸 background-size           |contain;
定位 background-origin        padding-box|border-box|content-box;
区域 background-clip          border-box|padding-box|content-box;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://106.15.95.246/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Say ty 2 hexo</title>
    <link href="http://106.15.95.246/2017/06/27/hello-world/"/>
    <id>http://106.15.95.246/2017/06/27/hello-world/</id>
    <published>2017-06-27T08:01:12.576Z</published>
    <updated>2017-06-30T02:27:30.534Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://106.15.95.246/tags/hexo/"/>
    
  </entry>
  
</feed>
